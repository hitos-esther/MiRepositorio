		1. ¡Hola Mundo! - Salida De Datos Por Pantalla
		
    • System.out.print() =para mostrar una frase por pantalla colocando la frase entre paréntesis.
    • System.out.println()= es igual pero añade un salto de línea al final.
    
    EJEMPLO
      /**
      * Muestra por pantalla la frase "¡Hola mundo!"
      *
      * @author Esther Hitos
      */
      public class HolaMundo { // Clase principal
      public static void main(String[] args) {
          System.out.println("¡Hola mundo!");
          }
      }
		1.2 Coloreado De Texto

	Con \033[CODIGOSUBRAYADO;CODIGOCOLORm 
	Ejemplo:\033[42;31m –> Subrayado en verde con texto en rojo
	Substituimos CODIGOCOLOR por uno de los siguientes números de colores:
			0 Reset
			30 Texto en Negro (Black)
			31 Texto en Rojo (Red)
			32 Texto en Verde (Green)
			33 Texto en Amarillo (Yellow)
			34 Texto en Azul (Blue)
			35 Texto en Morado (Magenta)
			36 Texto en Azul (Cyan)
			37 Texto en Blanco (White) Lo ponemos en gris para que lo visualicéis.
			
	Substituimos CODIGOSUBRAYADO por uno de los siguientes números de colores:
			40 Fondo en Negro (Black) (NO FUNCIONA EN NETBEANS)
			41 Fondo en Rojo (Red)
			42 Fondo en Verde (Green)
			43 Fondo en Amarillo (Yellow)
			44 Fondo Azul (Blue)
			45 Fondo en Morado (Magenta)46 Fondo en Azul (Cyan)
			47 Fondo en Blanco (White)
EJEMPLO			

public class TablaDeColores {
public static void main(String[] args) {
System.out.println("┌────────┬───────────┬────────┬────────────────┐");
System.out.println("│ Código │Color│ Código │Color│");
System.out.println("├────────┼───────────┼────────┼────────────────┤");
System.out.print("│30│\033[30m negro \033[39;49m│");
System.out.println("90│\033[90m negro claro \033[39;49m│");
System.out.print("│31│\033[31m rojo \033[39;49m│");
System.out.println("91│\033[91m rojo claro \033[39;49m│");
System.out.print("│32│\033[32m verde \033[39;49m│");
System.out.println("92│\033[92m verde claro \033[39;49m│");
System.out.print("│33│\033[33m amarillo \033[39;49m │");
System.out.println("93│\033[93m amarillo claro \033[39;49m│");
System.out.print("│34│\033[34m azul \033[39;49m│");
System.out.println("94│\033[94m azul claro \033[39;49m│");
System.out.print("│35│\033[35m morado \033[39;49m│");
System.out.println("95│\033[95m morado claro \033[39;49m │");
System.out.print("│36│\033[36m cian \033[39;49m│");
System.out.println("96│\033[96m cian claro \033[39;49m│");
System.out.print("│37│\033[37m blanco \033[39;49m│");
System.out.println("97│\033[97m blanco claro \033[39;49m │");
System.out.println("└────────┴───────────┴────────┴────────────────┘");

			1.3 Sangría
			
sangría o indentación {} = es muy importante sangrar (indentar) bien porque da una idea de
qué partes del código son las que contienen a otras.

			1.4 Caracteres Especiales
			
Mediante System.out.print() se pueden mostrar palabras o frases, esto es, secuencias de
letras, espacios y signos de puntuación Esta instrucción, además,
permite mostrar caracteres especiales - emoticonos, figuras de ajedrez, fichas de
dominó, etc.

Apéndice C. Caracteres especiales
Líneas para tablas
─━│┃┄┅┆┇┈┉┊┋┌┏┐┓└┗┘┛├┣┤┫┬┳┴┻┼╋═║╔╗╚╝╠╣╦╩╬╭╮╯╰
Bloques
█░▒▓■□▢▤▥▦▧▨◧◨◩◪◫◰◱◲◳⊞⊟⊠⊡
Figuras de ajedrez
♔♕♖♗♘♙♚♛♜♝♞♟
Círculos
◉○◌◍◎●◐◑◒◓◦◯⊕⊖⊗⊘⊙⊛⊜⊝ⴱⴲⵀⵁⵔⵕⵙⵚ
Flechas
←↑→↓↔↕↖↗↘↙↚↛↜↝↞↟↠↡↢↣↤↥↦↧↨↩↪↫↬↭↮↯↰↱↲↳↴↵
↶↷↸↹↺↻↼↽↾↿⇀⇁⇂⇃⇄⇅⇆⇇⇈⇉⇊⇋⇌⇍⇎⇏⇐⇑⇒⇓⇔⇕⇖⇗⇘⇙⇚⇛
⇜⇝⇞⇟⇠⇡⇢⇣⇤⇥⇦⇧⇨⇩⇪⇫⇬⇭⇮⇯⇰⇱⇲⇳⇴⇵⇶⇷⇸⇹⇺⇻⇼⇽⇾⇿➔➘
➙➚➛➜➝➞➟➠➡➢➣➤➥➦➧➨➩➪➫➬➭➮➯➱➲➳➴➵➶➷➸➹➺➻➼➽➾
Números en círculos
❶❷❸❹❺❻❼❽❾❿12345678910➊➋➌➍➎➏➐➑➒➓Apéndice C. Caracteres especiales
370
Dados
⚀⚁⚂⚃⚄⚅
Fichas de dominó
🀰🀱🀲🀳🀴🀵🀶🀷🀸🀹🀺🀻🀼🀽🀾🀿🁀🁁🁂🁃🁄🁅🁆🁇🁈🁉
🁊🁋🁌🁍🁎🁏🁐🁑🁒🁓🁔🁕🁖🁗🁘🁙🁚🁛🁜🁝🁞🁟🁠🁡🁢🁣
🁤🁥🁦🁧🁨🁩🁪🁫🁬🁭🁮🁯🁰🁱🁲🁳🁴🁵🁶🁷🁸🁹🁺🁻🁼🁽🁾🁿🂀🂁🂂🂃🂄🂅🂆🂇🂈🂉
🂊🂋🂌🂍🂎🂏🂐🂑🂒🂓
Cartas
🂠🂡🂢🂣🂤🂥🂦🂧🂨🂩🂪🂫🂬🂭🂮🂱🂲🂳🂴🂵🂶🂷🂸🂹🂺🂻🂼🂽🂾🃁🃂🃃
🃄🃅🃆🃇🃈🃉🃊🃋🃌🃍🃎🃏🃑🃒🃓🃔🃕🃖🃗🃘🃙🃚🃛🃜🃝🃞🃟
Caras
🐭🐮🐱🐵😀😁😂😃😄😅😆😇😈😉😊😋😌☹☺😍😎😏😐😑😒😓😔😕😖😗😘
😙😚😛😜😝😞😟😠😡😢😣😥😦😧😨😩😪😫😭😮😯😰😱😲😳😴😵😶😷😸😹
😺😻😼😽😾😿🙀
Horóscopo
♈♉♊♋♌♍♎♏♐♑♒♓
Miscelánea
⌨☎☏☔☀☁☃☄★☆☕☘☠☢☣☤☥☦☩♰♱☬☭☮☯☼☾♁♂※⁕⁜Ω♻⚐⚑
⚒⚓⚔⚕⚖⚗⚘⚙⚚⚛⚜⚠⚡⛀⛁⛂⛃✂✇✈✉✌✍✎✑✒✓✔✕✖✙✚✛✜✝✞✟
✠✡✢✣✤✥✦✧✩✪✫✬✭✮✯✰✱✲✳✴✵✶✷✸✹ꙮ

                        1.5 Salida Formateada
                        	
Instrucción System.out.printf() análoga al printf() del lenguaje C.
Permite formatear la salida que se pretende mostrar por pantalla.

EJEMPLO
/**
* Salida formateada
*
* @author Esther Hitos
*/
public class SalidaFormateada01 {
public static void main(String[] args) {
System.out.printf("El número %d no tiene decimales.\n", 21);
System.out.printf("El número %f sale con decimales.\n", 21.0);
System.out.printf("El %.3f sale exactamente con 3 decimales.\n", 21.0);
}
}

El carácter '\n' es un salto de línea.

En una casilla %d solo se aceptan números enteros (sin decimales).

En una casilla %.3f se especifica que se deben mostrar exactamente 3 decimales (podemos poner el numero de decimales 	que nos interese).

En una casilla %s dentro de una plantilla que se le pasa a un System.out.printf() se debe
	rellenar con una cadena de caracteres, es decir, con una secuencia de letras, espacios
	y signos de puntuación.
	
En la casilla %-10s se inserta una cadena de caracteres, %-10s alinea a la izquierda y %10s alinea a la derecha
El carácter \t , comillas simples con \' , comillas dobles con \" o icluso la propia barra inclinada con \\ se pueden 	incluir como tabuladores en una cadena formateada.

EJEMPLO

/**
* Salida formateada
*
* @author Esther Hitos
*/
public class SalidaFormateada02 {
public static void main(String[] args) {
	System.out.println(" Artículo	Precio/caja	No cajas");
	System.out.println("-----------------------------------------");
	System.out.printf("%-10s	%8.2f		%6d\n", "manzanas", 4.5, 10);
	System.out.printf("%-10s	%8.2f		%6d\n", "peras", 2.75, 120);
	System.out.printf("%-10s	%8.2f		%6d\n", "aguacates", 10.0, 6);
	}
}
			2.1 Definición y tipos de variables
			
Las variables pueden almacenar valores enteros, números decimales, caracteres,
cadenas de caracteres (palabras o frases),El contenido de las variables puede
cambiar durante la ejecución del programa.Escribiremos los nombres de variables en formato lowerCamelCase.
Puedes usar números en los nombres de variables pero nunca justo al principio; 5x no es un nombre válido pero x5 sí lo es.
Los nombres de las variables deben ser significativos, es decir, deben indicar
perfectamente qué información contienen.

			Enteros ( int y long )
			
Las variables que van a contener 👉️números enteros se declaran con int👈️ . Veamos un
EJEMPLO
/**
* Uso de variables enteras int
*
* @author Luis J. Sánchez
*/
public class VariablesEnteras {
	public static void main(String[] args) {
		int x; // Declara la variable x como entera
		x = 5; // Asigna el valor 5 a la variable x
		// Muestra el valor de x
	System.out.println("El valor actual de mi variable es " + x);
		x = 7; // Asigna el valor 7 a la variable x
		// Muestra de nuevo el valor de x
		System.out.println("y ahora es " + x);
	}
}

Si pretendemos almacenar 👉️valores muy grandes👈️ en una variable, 
	usaremos el tipo 👉️long👈️ en lugar de int .

		Números decimales ( double y float )
			
Usamos los tipos double o float cuando queremos (o esperamos) almacenar números con decimales en las variables.		
Las variables de tipo double tienen mayor precisión que las de tipo float .

Cada variable se debe definir en una línea diferente.
	double x;
	double y;
	
EJEMPLO:
	/**
	* Uso de variables que contienen números decimales
	*
	* @author Luis J. Sánchez
	*/
	public class VariablesConDecimales {
	public static void main(String[] args) {
		double x; // Se declaran las variables x e y
		double y; // de tal forma que puedan almacenar decimales.
		x = 7;    // double tambien acepta numeros enteros
		y = 25.01;
		System.out.println(" x vale " + x);
		System.out.println(" y vale " + y);
		}
	}
	
			Cadenas de caracteres ( String )
		
Se utilizan para almacenar palabras y frases,Todas las cadenas de caracteres deben ir entrecomilladas mediante el símbolo de comillasdobles (“).

	EJEMPLO
	
	/**
	* Uso del tipo String
	*
	* @author Luis J. Sánchez
	*/
	public class UsoDeStrings {
	public static void main(String[] args) {
	
		String miPalabra = "cerveza";
		String miFrase = "¿dónde está mi cerveza?";
	
		System.out.println("Una palabra que uso con frecuencia: " + miPalabra);
		System.out.println("Una frase que uso a veces: " + miFrase);
		}
	}
Un cadena de caracteres puede contener cero (cadena vacía)= String cadenaInicial = "";

				Caracteres ( char )
 La variable de tipo 👉️char . El carácter debe ir entrecomillado utilizando las comillas simples 
 👉️(‘).
 No es lo mismo "a"= cadena de caracteres, que 'a'= un carácter .
 
	EJEMPLO Variables

	/**
	* Uso del tipo char
	*
	* @author Luis J. Sánchez
	*/
	public class UsoDeChar {
		public static void main(String[] args) {
		char letra1 = 'c';
		char letra2 = 'a';
		char letra3 = 's';
		char letra4 = 'a';
		System.out.println("letra1: " + letra1);
		System.out.println("letra3: " + letra3);
		System.out.println("todas las letras juntas: " + letra1 + letra2 + letra3 + letra4);
		}
	}
Veamos un comportamiento curioso del tipo char .
	/**
	* Correspondencia entre los tipos char e int
	*
	* @author Luis J. Sánchez
	*/
	public class CharComoInt {
		public static void main(String[] args) {
		char letra1 = 'a';
		char letra2 = 'b';
		System.out.println(letra1);
		System.out.println(letra2);
		System.out.println(letra1 + letra2);
		System.out.println(letra1 + "" + letra2);
		}
	}
	El resultado del programa anterior se muestra a continuación.
		a
		b
		195 = System.out.println(letra1 + letra2);en realidad es la suma de los códigos ASCII de la letra “a” y 				de la letra “b” que son el 97 y el 98 respectivamente
		ab 
		
			
				2.2 Resumen de tipos primitivos
				
	TIPO		DESCRIPCIÓN			TAMAÑO		EJEMPLO
	boolean	verdadero o falso		1 bit		boolean abierto = true;
	byte		número entero			8 bits		byte repeticiones = 22;
	char		carácter			16 bits	char letra = ‘a’;
	short		número entero			16 bits	short pantalones = 22;
	int		número entero			32 bits	int asistentes = 22;
	long		número entero			64 bits	long poblacion = 22L;
	float		número con decimales		32 bits	float nota = 9.5f;
	double		número con decimales		64 bits	double precio = 22.55d;

				2.3 Operadores artiméticos
				
	OPERADOR	NOMBRE			EJEMPLO	DESCRIPCIÓN
	+		suma			20 + x		suma dos números
	-		resta			a-b		resta dos números
	*		multiplicacion		10 * 7		multiplica dos números
	/		division		altura / 2	divide dos números
	%		resto(modulo)		5%2		resto de la división entera
	++		incremento 		a++		incrementa en 1 el valor de la variable
	-- 		decremento 		a- -		decrementa en 1 el valor de la variable


EJEMPLOS de los operadores aritméticos.

	/**
	* Uso de los operadores aritméticos
	*
	* @author Luis J. Sánchez
	*/
	public class UsoDeOperadoresAritmeticos {
		public static void main(String[] args) {
		int x;
		x = 100;
		
		System.out.println(x + " " + (x + 5) + " " + (x - 5));
		System.out.println((x * 5) + " " + (x / 5) + " " + (x % 5));
		}
	}


			2.4 Asignación de valores a variables
			
EJEMPLO

	/**
	* Operaciones y asignaciones
	*
	* @author Luis J. Sánchez
	*/
	public class Asignaciones {
		public static void main(String[] args) {
		int x = 2;
		int y = 9;
		
		int sum = x + y;
		System.out.println("La suma de mis variables es " + sum);
		
		int mul = x * y;
		System.out.println("La multiplicación de mis variables es " + mul);
		}
	}















